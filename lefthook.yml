commit-msg:
  commands:
    lint-commit-msg:
      run: npx --yes commitlint --edit
pre-commit:
  parallel: true
  commands:
    fix-format-backend:
      tags: style
      root: backend
      stage_fixed: true
      run: ./gradlew spotlessApply -DspotlessFiles=$(echo {staged_files} | sed 's/ /,/g')
    check-format-frontend:
      root: frontend
      stage_fixed: true
      run: >-
        yarn prettier:fix {staged_files} &&
        yarn eslint:fix --no-warn-ignored {staged_files}
    check-javadocs:
      skip: true
      tags: check javadocs
      root: backend
      run: ./gradlew checkstyleMain -Dinclude=$(echo {staged_files} | sed 's/ /,/g') && git add {staged_files}
    run-pact-tests:
      root: frontend
      glob: "*.pact.*.{js,ts}"
      run: >-
        npm run test pact &&
        git add ../backend/pacts &&
        if ! git diff-index --quiet HEAD -- ../backend/pacts; then
          echo -e "\e[31mPact files have changed, please make sure to run the backend tests again before you push.\e[0m"
        fi
      stage_fixed: true
pre-push:
  parallel: true
  commands:
    licenses-audit:
      tags: licenses audit
      root: backend
      run: ./gradlew checkLicense
    secrets-audit:
      # NOTE: there's one caveat with this hook! When pushing, it will only correctly scan the range of
      # outgoing commits when pushing to a matching branch on the remote (e.g. `git push`) - pushing to a
      # different ref on the remote like `git push origin master:foreign` does not work..
      #
      # For this to work the following issue will need to be fixed (in short: Lefthook does not pass on stdin
      # to the hook script, whereas pre-push is one of the few hooks which retrieves information from there):
      # https://github.com/evilmartians/lefthook/issues/1471
      #
      # The hook configuration would then turn into:
      #
      # pre-push:
      #   scripts:
      #     secrets-audit:
      #       runner: sh
      #
      # with a file .lefthook/pre-push/secrets-audit looking something like:
      #
      # while read -r local_ref local_sha remote_ref remote_sha; do
      #   echo "$local_ref $local_sha $remote_ref $remote_sha" | talisman --githook pre-push
      # done
      #
      # exit 0
      tags: security audit
      run: currentbranch=$(git rev-parse --abbrev-ref HEAD); echo "refs/heads/$currentbranch HEAD refs/heads/$currentbranch $(git log -1 origin/$currentbranch --format='%H')" | talisman --githook pre-push
