# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Backend

on:
  push:
    branches: [main]
    paths:
      - backend/**
      - .github/workflows/backend.yml
  pull_request:
    branches: [main]
    paths:
      - backend/**
      - .github/workflows/backend.yml
  # Allow to run this workflow manually
  workflow_dispatch:

env:
  RUN_ID: ${{ github.run_id }}
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_IMAGE_NAME: ${{ github.repository }}
  CONTAINER_IMAGE_VERSION: ${{ github.sha }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  REPORTS_REPOSITORY: digitalservicebund/ris-search
  TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db,public.ecr.aws/aquasecurity/trivy-db
  TRIVY_JAVA_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-java-db,public.ecr.aws/aquasecurity/trivy-java-db
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_RELEASE: ${{ github.sha }}

jobs:
  validate-gradle-wrapper:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v3.5.0

  check-source-code-formatting:
    runs-on: ubuntu-latest
    needs: [ validate-gradle-wrapper ]
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21.0"
          distribution: "temurin"
          cache: gradle
      - name: Grant execute permission for gradlew
        working-directory: ./backend
        run: chmod +x gradlew
      - name: Build with Gradle
        working-directory: ./backend
        run: ./gradlew spotlessCheck

  audit-licenses:
    runs-on: ubuntu-latest
    needs: [ validate-gradle-wrapper ]
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21.0"
          distribution: "temurin"
          cache: gradle
      - name: Grant execute permission for gradlew
        working-directory: ./backend
        run: chmod +x gradlew
      - name: Run license scanner
        working-directory: ./backend
        run: ./gradlew checkLicense

  vulnerability-scan:
    runs-on: ubuntu-latest
    needs: [ validate-gradle-wrapper ]
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21.0"
          distribution: "temurin"
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.5.0
      - name: Build container image
        working-directory: ./backend
        run: ./gradlew bootBuildImage
      - name: Run Trivy vulnerability scanner
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: aquasecurity/trivy-action@a20de5420d57c4102486cdd9578b45609c99d7eb
        env:
          TRIVY_OFFLINE_SCAN: true
        with:
          image-ref: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}:${{ env.CONTAINER_IMAGE_VERSION }}
          format: "sarif"
          output: "trivy-results.sarif"
          cache-dir: .trivy
          trivyignores: backend/.trivyignore
      - name: Upload Trivy vulnerability image scanner results (as artifact)
        uses: actions/upload-artifact@v4
        with:
          name: "trivy-image-results-${{ matrix.app }}.sarif"
          path: "trivy-results.sarif"
          if-no-files-found: error
      - name: Check trivy results
        run: |
          if grep -qE 'HIGH|CRITICAL' trivy-results.sarif; then
            echo "Vulnerabilities found"
            echo "### Found vulnerabilities in trivy results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            RESULT=$(cat trivy-results.sarif | jq -r '[.runs[].results[].message.text] | join("\\n\\n")')
            echo -e $RESULT >> $GITHUB_STEP_SUMMARY
            echo -e $RESULT
            exit 1
          else
            echo "No significant vulnerabilities found"
            exit 0
          fi
      - name: Upload Trivy image scan results to GitHub Security tab (on 'main' only)
        uses: github/codeql-action/upload-sarif@v4
        if: ${{ always() && github.ref == 'refs/heads/main' }} # Bypass non-zero exit code..
        with:
          sarif_file: "trivy-results.sarif"
          category: trivy-backend-image-scan
      - name: Generate cosign vulnerability scan record
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: aquasecurity/trivy-action@a20de5420d57c4102486cdd9578b45609c99d7eb
        env:
          TRIVY_OFFLINE_SCAN: true
        with:
          image-ref: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}:${{ env.CONTAINER_IMAGE_VERSION }}
          format: "cosign-vuln"
          output: "vuln.json"
      - name: Upload cosign vulnerability scan record
        uses: actions/upload-artifact@v4
        with:
          name: "vuln.json"
          path: "vuln.json"
          if-no-files-found: error
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@66c485757701f8d5dbee32f24df38d904ca693ba
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  backend-tests-and-code-quality:
    name: Backend tests and code quality checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21.0"
          distribution: "temurin"
          cache: gradle
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
      - name: Grant execute permission for gradlew
        working-directory: ./backend
        run: chmod +x gradlew
      - name: Run Tests and Scan with SonarQube
        id: sonarqube-tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: ./backend
        run: ./gradlew sonar
        if: ${{ github.actor != 'dependabot[bot]' }}
      - name: Upload OpenAPI specification
        uses: actions/upload-artifact@v4
        with:
          name: openapi.json
          retention-days: 3
          path: backend/out/openapi.json
        if: ${{ steps.sonarqube-tests.outcome == 'success' }}
      - name: Run unit tests ( without SonarQube)
        working-directory: ./backend
        run: ./gradlew integrationTest
        if: ${{ github.actor != 'dependabot[bot]' }}
      - name: Run integration tests (without SonarQube, for dependabot)
        working-directory: ./backend
        run: ./gradlew integrationTest
        if: ${{ github.actor == 'dependabot[bot]' }}
      - name: Check SonarQube Quality Gate
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: sonarsource/sonarqube-quality-gate-action@dc2f7b0dd95544cd550de3028f89193576e958b9
        with:
          scanMetadataReportFile: backend/build/sonar/report-task.txt
        timeout-minutes: 3 # Force to fail step after specific time
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{ github.actor != 'dependabot[bot]' }}
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@66c485757701f8d5dbee32f24df38d904ca693ba
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-and-push-image:
    runs-on: ubuntu-latest
    needs:
      - validate-gradle-wrapper
      - check-source-code-formatting
      - audit-licenses
      - vulnerability-scan
      - backend-tests-and-code-quality
    permissions:
      contents: read
      id-token: write # This is used to complete the identity challenge with sigstore/fulcio..
      packages: write
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21.0"
          distribution: "temurin"
          cache: gradle
      - name: Grant execute permission for gradlew
        working-directory: ./backend
        run: chmod +x gradlew
      - name: Log into container registry
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: docker/login-action@3b8fed7e4b60203b2aa0ecc6c6d6d91d12c06760
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and publish container image
        working-directory: ./backend
        run: CONTAINER_REGISTRY_USER=${{ github.actor }} CONTAINER_REGISTRY_PASSWORD=${{ secrets.GITHUB_TOKEN }} ./gradlew bootBuildImage --publishImage
      - name: Set branch image name
        run: |
          BRANCH_NAME_TAG=$(echo $BRANCH_NAME | sed -e 's/[^[:alnum:]]/-/g')
          echo "IMAGE_NAME_BRANCH=$CONTAINER_REGISTRY/$CONTAINER_IMAGE_NAME:$BRANCH_NAME_TAG" >> $GITHUB_ENV
      - name: Tag and push latest
        run: |
          docker pull $CONTAINER_REGISTRY/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_VERSION
          docker tag $CONTAINER_REGISTRY/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_VERSION $IMAGE_NAME_BRANCH
          docker push $IMAGE_NAME_BRANCH
      - name: Install cosign
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: sigstore/cosign-installer@4959ce089c160fddf62f7b42464195ba1a56d382
      - name: Sign the published Docker image
        run: cosign sign --yes ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}:${{ env.CONTAINER_IMAGE_VERSION }}
      - name: Download cosign vulnerability scan record
        uses: actions/download-artifact@v4
        with:
          name: "vuln.json"
      - name: Attest vulnerability scan
        run: cosign attest --yes --replace --predicate vuln.json --type vuln ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}:${{ env.CONTAINER_IMAGE_VERSION }}
      - id: set-version
        run: echo "version=$CONTAINER_IMAGE_VERSION" >> $GITHUB_OUTPUT
      - name: Install sentry-cli using official script
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        if: ${{ env.SENTRY_AUTH_TOKEN != '' }}
      - name: Create and finalize Sentry release for Backend
        run: |
          sentry-cli releases new $CONTAINER_IMAGE_VERSION
          sentry-cli releases set-commits --auto $CONTAINER_IMAGE_VERSION
          sentry-cli releases finalize $CONTAINER_IMAGE_VERSION
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        if: ${{ env.SENTRY_AUTH_TOKEN != '' }}

  deploy-staging-portal:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    concurrency: deploy-staging
    environment: staging
    needs:
      - validate-gradle-wrapper
      - check-source-code-formatting
      - audit-licenses
      - vulnerability-scan
      - backend-tests-and-code-quality
      - build-and-push-image
      - run-e2e-tests
    permissions:
      id-token: write
    steps:
      - uses: chainguard-dev/actions/setup-gitsign@29fb6e979a0b3efc79748a17e8cec08d0594cbfd
      - name: Deploy new images
        uses: digitalservicebund/argocd-deploy@4fac1bb67c92ed168f6d9b22f8779ce241a9e412 # v1.0.0
        with:
          environment: staging
          version: ${{ env.CONTAINER_IMAGE_VERSION }}
          deploying_repo: ris-search # doesn't change anything, the public portal relies on the internal ("search") backend
          infra_repo: neuris-portal-infra
          deploy_key: ${{ secrets.PORTAL_INFRA_DEPLOY_KEY }}
          app: ris-portal-staging
          argocd_pipeline_password: ${{ secrets.ARGOCD_PIPELINE_PASSWORD }}
          argocd_server: ${{ secrets.ARGOCD_SERVER }}
          argocd_sync_timeout: 420

  deploy-uat-portal:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    environment: staging
    needs:
      - deploy-staging-portal
    permissions:
      id-token: write
    steps:
      - uses: chainguard-dev/actions/setup-gitsign@29fb6e979a0b3efc79748a17e8cec08d0594cbfd
      - name: Deploy new images
        uses: digitalservicebund/argocd-deploy@4fac1bb67c92ed168f6d9b22f8779ce241a9e412 # v1.0.0
        with:
          environment: uat
          version: ${{ env.CONTAINER_IMAGE_VERSION }}
          deploying_repo: ris-search
          infra_repo: neuris-portal-infra
          deploy_key: ${{ secrets.PORTAL_INFRA_DEPLOY_KEY }}
          app: ris-portal-uat
          argocd_pipeline_password: ${{ secrets.ARGOCD_PIPELINE_PASSWORD }}
          argocd_server: ${{ secrets.ARGOCD_SERVER }}
          argocd_sync_timeout: 420

  generate-backend-code-documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "21.0"
          distribution: "temurin"
          cache: gradle
      - name: Grant execute permission for gradlew
        working-directory: ./backend
        run: chmod +x gradlew
      - name: Run Javadoc
        working-directory: ./backend
        run: ./gradlew javadoc
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: backend-code-documentation
          retention-days: 3
          path: backend/build/docs/javadoc/

  push-reports:
    runs-on: ubuntu-latest
    env:
      reports-repo: digitalservicebund/ris-reports
    needs:
      - generate-backend-code-documentation
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v5
        with:
          repository: ${{ env.reports-repo }}
          ssh-key: ${{ secrets.REPORTS_DEPLOY_KEY }}
      - name: Setup git config
        run: |
          git config user.name "${{ github.repository }}"
          # This email identifies the commit as GitHub Actions - see https://github.com/orgs/community/discussions/26560
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Backend Code Documentation - Download
        uses: actions/download-artifact@v4
        with:
          name: backend-code-documentation
          path: tmp/backend-code-documentation/
      - name: Java - git add report
        uses: digitalservicebund/add-ris-report@c6c8735d23295c36a271c75e7dedc9b6b9a9ef5e
        with:
          filePath: tmp/backend-code-documentation
          destinationDir: search-code-documentation/java
          reportIsDirectory: true
      - name: Push reports
        run: |
          git diff-index --cached --quiet HEAD ||
            git commit \
              -m "Update from ${{ github.repository }}" \
              -m "From commit: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}" &&
            git push origin main &&
            echo "Pushed reports to ${{ github.server_url }}/${{ env.reports-repo }}" >> $GITHUB_STEP_SUMMARY

  push-openapi-spec:
    runs-on: ubuntu-latest
    env:
      documentation-repo: digitalservicebund/ris-portal-docs
    needs:
      - backend-tests-and-code-quality
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v5
        with:
          repository: ${{ env.documentation-repo }}
          token: ${{ secrets.DOCS_REPO_GITHUB_TOKEN }}
      - name: Setup git config
        run: |
          git config user.name "${{ github.repository }}"
          # This email identifies the commit as GitHub Actions - see https://github.com/orgs/community/discussions/26560
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Download OpenAPI spec artifact
        uses: actions/download-artifact@v4
        with:
          path: docs/data/
          name: openapi.json
      - name: Push reports
        run: |
          git add docs/data/openapi.json &&
          git diff-index --cached --quiet HEAD ||
            git commit \
              -m ${{ toJSON(github.event.head_commit.message) }} \
              -m "From commit: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}" &&
            git push origin main &&
            echo "Pushed documentation to ${{ github.server_url }}/${{ env.documentation-repo }}" >> $GITHUB_STEP_SUMMARY

  run-e2e-tests:
    needs:
      - backend-tests-and-code-quality
      - build-and-push-image
    uses: ./.github/workflows/pipeline-e2e.yml
    secrets: inherit
    with:
      backend_tag: ${{ github.sha }}
