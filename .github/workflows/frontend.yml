name: Frontend

on:
  push:
    branches: [main]
    paths:
      - frontend/**
      - .github/workflows/frontend.yml
  pull_request:
    branches: [main]
    paths:
      - frontend/**
      - .github/workflows/frontend.yml
  # Allow to run this workflow manually
  workflow_dispatch:

env:
  RUN_ID: ${{ github.run_id }}
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_IMAGE_NAME_IN_ORG: ris-search/frontend
  CONTAINER_IMAGE_NAME: ghcr.io/digitalservicebund/ris-search/frontend
  CONTAINER_IMAGE_VERSION: ${{ github.sha }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  REPORTS_REPOSITORY: digitalservicebund/ris-search
  TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db,public.ecr.aws/aquasecurity/trivy-db
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_RELEASE: ${{ github.sha }}

jobs:
  check-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.17.0
          cache: yarn
          cache-dependency-path: ./frontend/yarn.lock
      - name: Install node modules
        run: yarn install --immutable
        working-directory: ./frontend
      - name: Prepare nuxt
        run: yarn run prepare
        working-directory: ./frontend
      - name: Check style
        run: yarn run style:check
        working-directory: ./frontend
      - name: Run tests with coverage
        run: yarn run coverage
        working-directory: ./frontend
      - name: Set up SonarCloud
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: sonarsource/sonarcloud-github-action@eb211723266fe8e83102bac7361f0a05c3ac1d1b
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=digitalservicebund
            -Dsonar.projectKey=digitalservicebund_ris-search-frontend
            -Dsonar.projectBaseDir=frontend
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=src/coverage/lcov.info
        if: ${{  github.actor != 'dependabot[bot]' }}
      - name: Check SonarCloud Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@dc2f7b0dd95544cd550de3028f89193576e958b9
        with:
          scanMetadataReportFile: frontend/.scannerwork/report-task.txt
        timeout-minutes: 3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{ github.actor != 'dependabot[bot]' }}
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@66c485757701f8d5dbee32f24df38d904ca693ba
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  audit-licenses-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20.17.0
          cache: yarn
          cache-dependency-path: ./frontend/yarn.lock
      - name: Install node modules
        run: yarn install --immutable
        working-directory: ./frontend
      - name: Run license scanner
        run: yarn audit:licences
        working-directory: ./frontend
      - name: Upload licence report
        uses: actions/upload-artifact@v4
        with:
          name: licence-reports-frontend
          retention-days: 3
          path: frontend/frontend-licence-report.csv
      - name: Send status to Slack
        uses: digitalservicebund/notify-on-failure-gha@66c485757701f8d5dbee32f24df38d904ca693ba
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        with:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  frontend-file-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: write
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v5
      - name: Run Trivy vulnerability file scanner
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: aquasecurity/trivy-action@a20de5420d57c4102486cdd9578b45609c99d7eb
        with:
          scan-type: "fs"
          scan-ref: "./frontend"
          skip-dirs: node_modules # See https://github.com/aquasecurity/trivy/issues/1283
          format: "sarif"
          output: "trivy-results.sarif"
      - name: Check trivy results
        run: |
          if grep -qE 'HIGH|CRITICAL' trivy-results.sarif; then
            echo "Vulnerabilities found"
            echo "### Found vulnerabilities in trivy results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            RESULT=$(cat trivy-results.sarif | jq -r '[.runs[].results[].message.text] | join("\\n\\n")')
            echo -e $RESULT >> $GITHUB_STEP_SUMMARY
            echo -e $RESULT
            exit 1
          else
            echo "No significant vulnerabilities found"
            exit 0
          fi
      - name: Upload Trivy vulnerability file scanner results
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: "trivy-frontend-file-results.sarif"
          path: "trivy-results.sarif"
          if-no-files-found: error

  frontend-image-build-scan-and-push:
    runs-on: ubuntu-latest
    needs:
      - frontend-file-scan
    permissions:
      security-events: write
      packages: write
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v5
      - name: "Set environmental variables"
        run: |
          echo "IMAGE_NAME_WITH_TAG=$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_VERSION" >> $GITHUB_ENV
          BRANCH_NAME_TAG=$(echo $BRANCH_NAME | sed -e 's/[^[:alnum:]]/-/g')
          echo "IMAGE_NAME_BRANCH=$CONTAINER_IMAGE_NAME:$BRANCH_NAME_TAG" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into container registry
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: docker/login-action@3b8fed7e4b60203b2aa0ecc6c6d6d91d12c06760
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          file: frontend/Dockerfile
          context: frontend
          tags: ${{ env.IMAGE_NAME_WITH_TAG }},${{ env.IMAGE_NAME_BRANCH }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run Trivy vulnerability image scanner
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: aquasecurity/trivy-action@a20de5420d57c4102486cdd9578b45609c99d7eb
        with:
          image-ref: ${{ env.IMAGE_NAME_WITH_TAG }}
          format: "sarif"
          output: "trivy-results.sarif"
      - name: Upload Trivy vulnerability image scanner results (as artifact)
        uses: actions/upload-artifact@v4
        with:
          name: "trivy-image-results-${{ matrix.app }}.sarif"
          path: "trivy-results.sarif"
          if-no-files-found: error
      - name: Upload Trivy image scan results to GitHub Security tab (on 'main' only)
        uses: github/codeql-action/upload-sarif@v4
        if: ${{ github.ref == 'refs/heads/main' }} # Bypass non-zero exit code..
        with:
          sarif_file: "trivy-results.sarif"
          category: trivy-frontend-image-scan
      - name: Check trivy results
        run: |
          if grep -qE 'HIGH|CRITICAL' trivy-results.sarif; then
            echo "Vulnerabilities found"
            echo "### Found vulnerabilities in trivy results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            RESULT=$(cat trivy-results.sarif | jq -r '[.runs[].results[].message.text] | join("\\n\\n")')
            echo -e $RESULT >> $GITHUB_STEP_SUMMARY
            echo -e $RESULT
            exit 1
          else
            echo "No significant vulnerabilities found"
            exit 0
          fi
      - name: Generate cosign vulnerability scan record
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: aquasecurity/trivy-action@a20de5420d57c4102486cdd9578b45609c99d7eb
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          image-ref: ${{ env.IMAGE_NAME_WITH_TAG }}
          format: "cosign-vuln"
          output: "vuln-frontend.json"
      - name: Upload cosign vulnerability scan record
        uses: actions/upload-artifact@v4
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          name: "vuln-frontend.json"
          path: "vuln-frontend.json"
          if-no-files-found: error
      - name: Install cosign
        if: ${{ github.actor != 'dependabot[bot]' && github.ref == 'refs/heads/main' }}
        # Third-party action, pin to commit SHA!
        # See https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
        uses: sigstore/cosign-installer@4959ce089c160fddf62f7b42464195ba1a56d382
      - name: Sign the published Docker image
        run: cosign sign --yes ${{ env.IMAGE_NAME_WITH_TAG }}
        if: ${{ github.actor != 'dependabot[bot]' && github.ref == 'refs/heads/main' }}
      - name: Attest vulnerability scan
        run: cosign attest --yes --replace --predicate vuln-frontend.json --type vuln ${{ env.IMAGE_NAME_WITH_TAG }}
        if: ${{ github.actor != 'dependabot[bot]' && github.ref == 'refs/heads/main' }}
      - id: set-version
        run: echo "version=$CONTAINER_IMAGE_VERSION" >> "$GITHUB_OUTPUT"
      - name: Install sentry-cli using official script
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
        if: ${{ github.actor != 'dependabot[bot]' && github.ref == 'refs/heads/main' }}
      - name: Create and finalize Sentry release for Frontend
        run: |
          sentry-cli releases new $CONTAINER_IMAGE_VERSION
          sentry-cli releases set-commits --auto $CONTAINER_IMAGE_VERSION
          sentry-cli releases finalize $CONTAINER_IMAGE_VERSION
        if: ${{ github.actor != 'dependabot[bot]' && github.ref == 'refs/heads/main' }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

  deploy-staging-portal:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    concurrency: deploy-staging
    environment:
      name: staging
      url: https://ris-portal.dev.ds4g.net/
    needs:
      - check-frontend
      - frontend-file-scan
      - frontend-image-build-scan-and-push
      - run-e2e-tests
    permissions:
      id-token: write
    steps:
      - uses: chainguard-dev/actions/setup-gitsign@29fb6e979a0b3efc79748a17e8cec08d0594cbfd
      - name: Deploy new images
        uses: digitalservicebund/argocd-deploy@4fac1bb67c92ed168f6d9b22f8779ce241a9e412 # v1.0.0
        with:
          environment: staging
          version: ${{ env.CONTAINER_IMAGE_VERSION }}
          deploying_repo: ${{ env.CONTAINER_IMAGE_NAME_IN_ORG }}
          infra_repo: neuris-portal-infra
          deploy_key: ${{ secrets.PORTAL_INFRA_DEPLOY_KEY }}
          app: ris-portal-staging
          argocd_pipeline_password: ${{ secrets.ARGOCD_PIPELINE_PASSWORD }}
          argocd_server: ${{ secrets.ARGOCD_SERVER }}
          argocd_sync_timeout: 600

  deploy-uat-portal:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    environment:
      name: staging
      url: https://ris-portal.uat.ds4g.net/
    needs:
      - deploy-staging-portal
    permissions:
      id-token: write
    steps:
      - uses: chainguard-dev/actions/setup-gitsign@29fb6e979a0b3efc79748a17e8cec08d0594cbfd
      - name: Deploy new images
        uses: digitalservicebund/argocd-deploy@4fac1bb67c92ed168f6d9b22f8779ce241a9e412 # v1.0.0
        with:
          environment: uat
          version: ${{ env.CONTAINER_IMAGE_VERSION }}
          deploying_repo: ${{ env.CONTAINER_IMAGE_NAME_IN_ORG }}
          infra_repo: neuris-portal-infra
          deploy_key: ${{ secrets.PORTAL_INFRA_DEPLOY_KEY }}
          app: ris-portal-uat
          argocd_pipeline_password: ${{ secrets.ARGOCD_PIPELINE_PASSWORD }}
          argocd_server: ${{ secrets.ARGOCD_SERVER }}
          argocd_sync_timeout: 600

  run-e2e-tests:
    needs:
      - frontend-image-build-scan-and-push
    uses: ./.github/workflows/pipeline-e2e.yml
    secrets: inherit
    with:
      frontend_tag: ${{ github.sha }}
